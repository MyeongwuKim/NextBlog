// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id        Int        @id @default(autoincrement())
  category  Category[]
  post      Post[]
  email     String     @unique
  github    String?
  password  String
  name      String
  introduce String?
  avatar    String?
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  post      Post[]
  order     Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  account   Account   @relation(fields: [accountId], references: [id])
  accountId Int
  Comment   Comment[]
  Reply     Reply[]
}

model Post {
  id         Int       @id @default(autoincrement())
  title      String
  content    String    @db.Text()
  thumbnail  String?
  isPrivate  Boolean?  @default(false)
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  preview    String?   @db.VarChar(200)
  comments   Comment[]
  images     Image[]
  categoryId Int
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  allow      Boolean?  @default(true)
  account    Account   @relation(fields: [accountId], references: [id])
  accountId  Int
  replys     Reply[]
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String    @db.VarChar(500)
  name       String?
  password   String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int?
  isMe       Boolean   @default(false)
  replys     Reply[]
  history    History?  @relation(fields: [historyId], references: [id], onDelete: Cascade)
  historyId  Int?      @unique
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
}

model Reply {
  id         Int       @id @default(autoincrement())
  content    String
  name       String?
  password   String?
  isMe       Boolean   @default(false)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int?
  comment    Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId  Int?
  history    History?  @relation(fields: [historyId], references: [id], onDelete: Cascade)
  historyId  Int?      @unique
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
}

model Image {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  imageId   String    @unique
  Post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
}

model History {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  comment   Comment?
  reply     Reply?
  isReply   Boolean   @default(false)
}
